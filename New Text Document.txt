1>So first is installation of the nodejs Just go to the official website and then install it. To check
wheathter it is installed or not just go to windows terminal then type node -v which will let you
know the version of the node.
If it doesn't show any version try to reinstall it 
2>Now why do we need nodejs?To run the javascript code outside the browser
3>You can execute JS code in the terminal itself for it type node command then you are good to go
to exit press .exit
4>You can execute the module using the command node modulename.js
then to exit press CTRl+C
5>We can read and write file in the text file using the module fs
const fs=require("fs");
We can achieve using two ways 1>Synchrnous 2>Asynchrnous
1>Synchronous

*Readfile=const data=fs.readFileSync('textFilepath','type-of-charset');
*Writefile= fs.writeFileSync('textOutputPath','The text you want to insert');

Btw this is Blocking code so we don't prefer it

2>Asynchrnous
*Readfile= fs.readFile('textFilepath','utf-8',(err,data)=>{
 console.log(data);
});
*writeFile=fs.writeFile('textFilepath','The text you want to write','utf-8',(err)=>{
console.log("File writen");
});

*__dirname indicates the current directory:Which is string


How can you create simple web server?for this you need to import module
that is https;
const http=require('http');

const server= http.createServer((req,res)=>{
res.end("hello from the server");///This would be displayed in the server page
});

server.listen(port,localhost,()=>{
console.log("Server is running on portt 8000");
}

*NPM
For any packages to be installed you need to set up package.json which can be made by command
npm init
We got two types of dependences 
1>Dependencies=this is for the development.Kind of code section
2>Devdependencies=this for to run the development, here we mention npm i xyz --save-dev or npm i xyz --global


if we want to install something as dev dependencies we can install it as npm i nodemon --save-dev
if we want to uninstall then run npm uninstall nodemon --save-dev

if we want to run the local dependencies then define it in the scripts
This would basically  run the local dependencies 


we can also install the dev dependencies as global if we want to acess it from anywhere that is npm i nodemon  --global
you can acess this from anywhere of the project by running command nodemon index.js
if we want to uninstall the dev dependencies as global we can write npm uninstall nodemon --global


we have npm something called version beside the dependencies those 3 groups are 
1st group is called major version --- this can invole breaking changes
2nd group is called minor version ---- new features doesn't not involve breaking changes
3rd group is called patch version ---to fix bugs

to check the outdated packages we can run the command npm outdated
to update a dependecny write npm update dependency

^ to accept minor and patch release
~ we accept only minor versions


Node js has two dependencies for 
1> V8 =This helps in execution of javascript code into machine code
2>libuv=This helps in giving acess to underlying computer operating system files system networking and
more.It is completely written in C++


Event loop=It is responsible for easy task  like executing callback
Thread pool=For heavy work


Node js Has got single thread. It will run in single thread so make sure you don't block the code
by writing syncrhronous code

Thread pool has got 4 additional threads
File system API's
cryptography compression
DNS lookup 
All this tasks are performed in the threadpool

*Call backs are functions which are executed when another functions has finished execution


EventLoop=All the application code that is inside the callback function will run in event loop
events like newhttpsrequest ,timer expired, finished reading file all these will emit function as soon as they are done
with their work
out event loop will pick up events and call the function that are associated with each event



Express:
It is minimal Nodejs Framework
It is writen using 100% Nodejs
It has got simplfied routing , middlware,server-siderendering,response request model handling
You can install it using command line typing npm i express

*We shouldn't be using that http module then http.createserver((req,res)=>{
}) then assign it to server then we should be listening. It is long and hectic process so we have Express

IN express it is simple
firstly 
const express=require('express');
const app=express();

Here you can use multiple get put patch delete requests
like

app.get('/',(req,res)=>{
res.status(200).json({message:"Done"})
});

*If you see above you would see it same as nodejs first you set header in response then the data


app.listen(port,localhost,()=>{
console.log("Express hosted server is running");
});

Here we have the concept of middleware where we have it in between the request and response cycle
We can also build our own middle ware using 
const express=require('express');
const app=express();
app.use((req,res,next){
console.log("hello from the middleware");
..........
.......
.........
next()
})
*****
Converting from least efficient to better efficent one
app.get('/api/v1/users',(req,res)=>{
res.status(200).json({message:"Done"})
});
app.post('/api/v1/users',(req,res)=>{
res.status(200).json({message:"Done"})
});

We can reduce it to one step
*****
const getAllusers=(res,res)=>{
res.status(200).json({message:"Done",data})
}
cosnt PostallUser=(res,res)=>{
res.status(200).json({message:"Done",data})
}

app.route('/api/v1/users').get(getAllusers).post(PostallUser)

*** 
Mounting multiple routers
===Using middleware implemented in real time project

We have paramter middle ware

we have also got config.env= environment variables Go through it once


MONGO DB
So first lets go through the installation
Firstly install the mongodb community version then MongodDB compass will get installed automatically
1>In Local disk  C Create a file called data and create a file inside it called db ...Follow the video

We can create a local database also Live database

We create server using Windows power shell
Then we connect to that server using Windows Power shell


Command line approach
First open the windows power shell and type the command mongod.exe It will be running in background
then run the command mongo.exe then you are good to go
1>show dbs command shows all the dbs
2>you can use-dbsname to switch to the databases or to create database
3>To display all the databases in the folder of that type db.filename.find()
like in our case example it is db.tours.find()
4>To insert the object type theh command db.tours.insertOne({}).for many object type db.tours.insert
Many([{},{}])
5>For reading specific data type below command
db.tours.find({name:"relative-name"})
type one of the fields of that object which you want to find

6>For reading specific data with specific condition
db.tours.find({price:{$lt:500}})
lt means lower then we also we lte or gt meaning greater than 

7>We can also find and condition like
db.tours.find({price:{$lt:500},{rating:{$gt:4.7});

8>We can also find or condition like
db.tours.find({$or:[{price:{$lt:500},{rating:{$gt:4.7}}]})

9>We can also update 
db.tours.updateOne({name:"relative-name"},{$set:{price:48}})

updateMany also goes the same way db.tours.updateMany({{name:"relative-name"},{price:{$gt:500}}},{$set:{whattoset:true}})

10>We can also delete using db.tours.deleteOne({name:"relative"}) for many use deleteMany
db.tours.deleteMany({})
Above statements can delete all the objects

Below is the command to delete the localdatabase
> show dbs
admin         0.000GB
local         0.000GB
tutorialkart  0.000GB
> use tutorialkart
switched to db tutorialkart
> db.dropDatabase()
{ "dropped" : "tutorialkart", "ok" : 1 }
> show dbs
admin  0.000GB
local  0.000GB


Mongoose
It is a driver that connects the application to the database.It is an framework of the MongodB
*Its featuers

schemas to model data and relationships,easy data validation,simple query API, middlware,etc

How to use this?
Firstly you need to import mongoose 
const mongoose=require('mongoose');
we would have mongodb database generated connection string found.Just store that it in variable DB
then follow this process 
mongoose.connnect(DB,{
useNewUrlParser:true,
    useCreateIndex:true,
    useFindAndModify:false,
    useUnifiedTopology:true
});

/////Above code is used for deprecation warnings

